# -*- coding: utf-8 -*-
# Generated by Django 1.11.28 on 2020-02-24 14:53
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        ('bingo', '0010_change_type_field_to_positivesmallinteger'),
    ]

    operations = [
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_enabled', models.BooleanField(default=False, help_text='Disable to disallow new games, even in the game times.')),
                ('start_time_begin', models.TimeField(blank=True, default=None, help_text='Begin of the time where games can be started (usually before the start of the show).', null=True)),
                ('start_time_end', models.TimeField(blank=True, default=None, help_text='End of the time where games can be started (usually before the start of the show).', null=True)),
                ('vote_start_time', models.TimeField(blank=True, default=None, help_text='Time at which voting starts (usually the start of the show).', null=True)),
                ('end_time', models.TimeField(blank=True, default=None, help_text='Time at which a game is stopped (end of the show).', null=True)),
                ('week_days_monday', models.BooleanField(default=True, help_text='True, when games can be started on mondays.')),
                ('week_days_tuesday', models.BooleanField(default=True, help_text='True, when games can be started on tuesdays.')),
                ('week_days_wednesday', models.BooleanField(default=True, help_text='True, when games can be started on wednesdays.')),
                ('week_days_thursday', models.BooleanField(default=True, help_text='True, when games can be started on thursdays.')),
                ('week_days_friday', models.BooleanField(default=True, help_text='True, when games can be started on fridays.')),
                ('week_days_saturday', models.BooleanField(default=True, help_text='True, when games can be started on saturdays.')),
                ('week_days_sunday', models.BooleanField(default=True, help_text='True, when games can be started on sundays.')),
                ('soft_timeout', models.IntegerField(blank=True, default=None, help_text='Minutes after which inactive games are stopped. Either Soft Timeout or Hard Timeout must be set or your games will never stop.', null=True)),
                ('hard_timeout', models.IntegerField(blank=True, default=None, help_text='Minutes after which games are stopped. Either Soft Timeout or Hard Timeout must be set or your games will never stop.', null=True)),
                ('user_activity_timeout', models.IntegerField(blank=True, default=5, help_text='Minutes after which a user is considered inactive.', null=True)),
                ('description_enabled', models.BooleanField(default=False, help_text='Allow the User starting the game to set a description.')),
                ('thumbnails_enabled', models.BooleanField(default=True)),
                ('colors_from', models.IntegerField(default=80, help_text='Color intensity for the game fields.')),
                ('colors_to', models.IntegerField(default=160, help_text='Color intensity for the game fields.')),
                ('middle_field_datetime_format', models.CharField(default='%Y-%m-%d %H:%M', help_text='Format for the date and time on the middle field.', max_length=30)),
                ('tweetbutton_text', models.CharField(blank=True, default='My bingo board:', help_text='The text that is used when a user clicks the tweet or toot button.', max_length=280)),
                ('tweetbutton_hashtags', models.CharField(blank=True, default='bingo', help_text='A comma separated list of hashtags that are used when the user clicks the tweet or toot button.', max_length=280)),
                ('twittercard_account', models.CharField(blank=True, default='', help_text='The Twitter account associated with the Twitter card (useful for Twitter statistics)', max_length=280)),
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sites.Site')),
            ],
        ),
    ]
